import { AvailabilityManagementObject } from "@objects/AvailabilityManagementObject";
import { WebActions } from '@lib/WebActions'
import {ComboBoxActions} from '@lib_web/ComboBoxActions'
import { DateActions } from "@lib/web/DateActions";
import { Page,expect } from "@playwright/test";


let webactions: WebActions;
let comboBoxObj: ComboBoxActions;
let dateObj: DateActions;

function delay(time) {
    return new Promise(function(resolve) {
        setTimeout(resolve, time)
    });
 }

export class AvailabilityManagementPage extends AvailabilityManagementObject{

    readonly page: Page;

    constructor(page: Page) {
        super();
        this.page = page;
        webactions = new WebActions(this.page);
        comboBoxObj = new ComboBoxActions(this.page);
        dateObj = new DateActions(this.page);

       }

    async selectValeFromDropDown(dropdownName: string, value: string): Promise<void>{
       await comboBoxObj.SelectValue(this.project_dropdown(dropdownName), dropdownName, value);
    }

    async SelectAlarmButton(buttonName: string): Promise<void>{
        await webactions.clickElement(this.alarms_btn(buttonName));
    }

    async  SelectDateRange(fromDate: string, toDate: string): Promise<void> {
        await dateObj.SelectDateRange(fromDate, toDate);
        await webactions.clickElement(this.search_btn);
    }

    async EnterValueInGrid(colName: string, value: string){
        let colArray: string[], valueArray: string[];
        let length = 1;
        if(colName.includes(":")){
             colArray =  colName.split(":")
             valueArray =  value.split(":")
             length = colArray.length;
        }
        await webactions.waitForElementAttached(this.row_count);
        const rowIndex =  (await this.page.$$(this.row_count)).length.toString();
       // console.log(rowIndex);
        await webactions.clickElement(this.actions_btn((parseInt (rowIndex)-1).toString()));
        await webactions.clickElement(this.add_delete_btn("add"));
        if(length > 1){
            for(let i = 0; i < length; i++){        
                await this.enterRowColValue(colArray[i], valueArray[i]);
            }
        }
        else{
            await this.enterRowColValue(colName, value)
        }
    
    }async DeleteFromGrid(){
        await webactions.waitForElementAttached(this.row_count);
         const rowIndex =  (await this.page.$$(this.row_count)).length.toString();
    
        await webactions.clickElement(this.actions_btn((parseInt (rowIndex)-1).toString()));
        await webactions.clickElement(this.add_delete_btn("delete"));

            await this.page.locator('text=Yes').click();
    
            }
       // }
      
        /*
    //if(parseInt(rowIndexd)>0){  
        await webactions.clickElement(this.add_delete_btn("delete"));
        await webactions.clickElement(this.actions_btn((parseInt (rowIndexd)-1).toString()));      
        await webactions.clickElement(this.add_delete_btn("delete"));
        await webactions.clickElement(this.actions_btn((parseInt (rowIndexd)-1).toString()));      
        await webactions.clickElement(this.add_delete_btn("delete"));
    
}*/
    


   

   /*
  
  const lastrow= await this.page.locator('button:has-text("...")').nth(-1).toString();//first()
  const firstrow=await this.page.locator('button:has-text("...")').nth(0).toString();//first()
    //for(var i=0;this.page.locator('button:has-text("...")').nth(i)!==lastrow;i++);

  //const secondrow=await this.page.locator('button:has-text("...")').nth(1).toString();
//   
while(firstrow!==lastrow){
    // Click button:has-text("...") >> nth=0
 await this.page.locator('button:has-text("...")').nth(0).click();//first()

 // Click text=delete Delete
  await this.page.locator('text=delete Delete').click();
 // Click text=Yes
 await this.page.locator('text=Yes').click();

 await delay(2000);

 
 const lastrow= await this.page.locator('button:has-text("...")').nth(-1).toString();//first()
  const firstrow=await this.page.locator('button:has-text("...")').nth(0).toString();//first()
    //for(var i=0;this.page.locator('button:has-text("...")').nth(i)!==lastrow;i++);

 // const secondrow=await this.page.locator('button:has-text("...")').nth(1).toString();
 const deletbtn=this.page.locator('text=delete Delete').toString();
 console.log(webactions.waitForElementAttached(deletbtn))
 if(webactions.waitForElementAttached(deletbtn)==null){
    console.log("exit");
    break;
 }

 }*/
//  /*if(secondrow===lastrow)
 
   // await this.page.locator('button:has-text("...")').nth(0).click();//first()

 // Click text=delete Delete
 //await this.page.locator('text=delete Delete').click();

 // Click text=Yes
 //await this.page.locator('text=Yes').click();
 
 
 
 //await webactions.waitForElementAttached(this.row_count);
      

async Delete(){
   await webactions.waitForElementAttached(this.row_count);
    console.log("row count "+this.row_count);
         const rowIndex =  (await this.page.$$(this.row_count)).length.toString();
         var k=parseInt(rowIndex);
         console.log(rowIndex );
         var i:number;
         for(i=(k-1);i>0;i--)
         {
            // Click button:has-text("...") >> nth=0
          await this.page.locator('button:has-text("...")').nth(0).click();//first()
//  // Click text=delete Delete
          await this.page.locator('text=delete Delete').click();
//  // Click text=Yes
          await this.page.locator('text=Yes').click();
// 

         }
        // console.log("here");
        }
//          const rows = this.page.locator('table tr');

//          const count = await rows.count()
//          console.log("total rows :"+count);
//          if(k>1){
// while(k>0){
//  // Click button:has-text("...") >> nth=0
//  await this.page.locator('button:has-text("...")').nth(0).click();//first()
//  // Click text=delete Delete
//  await this.page.locator('text=delete Delete').click();
//  // Click text=Yes
//  await this.page.locator('text=Yes').click();
//  console.log(k+"/n")
//  k=k-1;
// }}
 // Click button:has-text("...") >> nth=0
 //await this.page.locator('button:has-text("...")').first().click();
 // Click text=delete Delete
 //await this.page.locator('text=delete Delete').click();
 // Click text=Yes
 //await this.page.locator('text=Yes').click();





    async enterRowColValue(colName: string, value: string){
        const colIndex =  await this.GetGridColumnIndex(colName);
        const rowIndex =  (await this.page.$$(this.row_count)).length.toString();
        await webactions.doubleClickElement(this.grid_cell( (parseInt (rowIndex) -2).toString(), colIndex));
        await this.page.keyboard.type( value);
    }

    

    async GetGridColumnIndex(columnName:string): Promise<string>{
        return await this.page.$eval(this.grid_Col_text(columnName) , ele => ele.getAttribute("aria-colindex"));
    }

//Pop-up button
async Pop_UpDelete(){
    await this.page.locator('text=Yes').click();
}


    async SaveAndPublish(): Promise<void>{

        // this.page.on("dialog",async(alert)=>{
        //     const text=alert.message();
        //     //console.log(text);
        //     await alert.accept();
            
        // })                                                      
    
      // await this.page.locator("button:has-text('Save')").click();
    
    
        await this.page.locator('//button[@mattooltip="Save"]').click();
        await this.Pop_UpSave();
        await this.SavePopUpOK();

    }
    async Pop_UpSave(){
        await this.page.locator('//button[contains(text(), "Yes")]').click();
    }
    async SavePopUpOK(){
        await this.page.locator('//button[contains(text(), "Ok")]').click();
        

    }

async CheckWtg(){
    const list = this.page.locator('[aria-label="Contractual Availability\\. Highcharts interactive chart\\."] >> text=100.0 %');
   // const locator = this.page.locator('text=80.0 %');
    await expect(list).toHaveCount(1);
    //const locator = page.locator('input[type=number]');
//await expect(locator).toHaveValue(/[80]/);
}
}
